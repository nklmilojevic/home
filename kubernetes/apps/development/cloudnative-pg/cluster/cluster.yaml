---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres
  namespace: development
  annotations:
    kyverno.io/ignore: "true"
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgresql:14.7
  inheritedMetadata:
    labels:
      kube-image-keeper.enix.io/image-caching-policy: ignore
  primaryUpdateStrategy: unsupervised
  storage:
    size: 20Gi
    storageClass: local-path
  superuserSecret:
    name: cloudnative-pg-secret
  # bootstrap:
  #   recovery:
  #     source: postgres
  # postgresql:
  #   parameters:
  #     max_connections: "600"
  #     shared_buffers: 512MB
  cluster:
    monitoring:
      enabled: true
      podMonitor:
        enabled: true
      podMonitorMetricRelabelings:
        - { sourceLabels: ["cluster"], targetLabel: cnpg_cluster, action: replace }
        - { regex: cluster, action: labeldrop }
  backup:
    retentionPolicy: 7d
    barmanObjectStore:
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://k3s-cloudnative-pg/
      endpointURL: https://s3.us-west-002.backblazeb2.com
      serverName: postgres
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-secret
          key: aws-secret-access-key
  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: postgres
  #     barmanObjectStore:
  #       wal:
  #         compression: bzip2
  #         maxParallel: 8
  #       destinationPath: s3://k3s-cloudnative-pg/
  #       endpointURL: https://s3.us-west-002.backblazeb2.com
  #       s3Credentials:
  #         accessKeyId:
  #           name: cloudnative-pg-secret
  #           key: aws-access-key-id
  #         secretAccessKey:
  #           name: cloudnative-pg-secret
  #           key: aws-secret-access-key
